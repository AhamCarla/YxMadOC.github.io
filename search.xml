<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Brief Introduction of Gradle]]></title>
    <url>%2F2019%2F07%2F20%2FBrief-Introduction-of-Gradle%2F</url>
    <content type="text"><![CDATA[本文只介绍Gradle于Java项目上的应用。 What is Gradle?Gradle与Ant、Maven一样，是一种构建工具，能自动化执行项目构建，并提供依赖管理的功能。与Ant、Maven相比，因为Gradle不像Maven那样为用户强行定义了项目周期，并且能自定义构建任务，所以Gradle具有更大的灵活性。 Java ProjectsGradle使用了约定优于配置的原则来构建基于JVM的项目，其中有些约定参考了Apache Maven。尤其是使用了与Maven项目相同的项目结构，并且Gradle可以兼容Maven仓库。 Convention-Over-ConfigurationConvention-Over-Configuration即约定优于配置，以Gradle中的Java支持插件为例： 得益于Java插件，你将可以执行以下任务： compileTask： 用于编译 src/main/java 下的所有Java源文件 compileTestJava： 用于编译 src/test/java 下的所有Java源文件 test：用于执行 src/test/java 下的所有测试 jar: 将 main 目录下的所有已编译文件以及 src/main/resources 下的资源文件打包成&lt;项目名&gt;-&lt;版本号&gt;.jar javadoc：将生成main目录下的所有文档 上面提到的目录，如 src/main/java 和 src/test/java 以及 src/main/resources 都是Gradle约定优于配置原则的直接体现。当然，你也可以定义自己的Source目录，但除非有特殊需要，平时并不建议这么做。 除Gradle之外，许多框架（如Spring Boot）也采用了这种原则，目的是为了方便开发者专注于开发，而不是花时间在繁琐的配置之上。 build.gradle类似Maven中的pom.xml，Gradle通过build.gradle来定义构建任务以及引入依赖。下面是一个常见的build.gradle示例： 1234567891011121314151617181920212223242526272829303132333435363738394041buildscript &#123; ext &#123; springBootVersion = &apos;2.0.3.RELEASE&apos; &#125; repositories &#123; mavenCentral() maven &#123; url &quot;https://plugins.gradle.org/m2/&quot; &#125; &#125; dependencies &#123; classpath &quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot; classpath &apos;org.junit.platform:junit-platform-gradle-plugin:1.0.0&apos; &#125;&#125;apply plugin: &apos;java&apos;apply plugin: &apos;idea&apos;apply plugin: &apos;org.springframework.boot&apos;apply plugin: &apos;io.spring.dependency-management&apos;apply plugin: &apos;org.junit.platform.gradle.plugin&apos;group = &apos;com.tw&apos;version = &apos;0.0.1-SNAPSHOT&apos;sourceCompatibility = 1.8repositories &#123; mavenCentral()&#125;dependencies &#123; compile &apos;org.springframework.boot:spring-boot-starter-actuator&apos; compile &apos;org.springframework.boot:spring-boot-starter-web&apos; compile &apos;org.springframework.boot:spring-boot-starter-data-jpa&apos; runtime &apos;com.h2database:h2:1.4.199&apos; compile &apos;org.projectlombok:lombok:1.18.8&apos; compile &apos;org.flywaydb:flyway-core:5.2.4&apos; testCompile &apos;org.springframework.boot:spring-boot-starter-test&apos; testImplementation(&apos;org.junit.jupiter:junit-jupiter-api:5.0.0&apos;) testCompile(&apos;org.junit.jupiter:junit-jupiter-params:5.0.0&apos;) testRuntime(&apos;org.junit.jupiter:junit-jupiter-engine:5.0.0&apos;)&#125; buildScripts在许多Gradle脚本中，经常能看见： 1234567891011121314151617buildscript &#123; ext &#123; springBootVersion = &apos;2.0.3.RELEASE&apos; &#125; repositories &#123; mavenCentral() maven &#123; url &quot;https://plugins.gradle.org/m2/&quot; &#125; &#125; dependencies &#123; classpath &quot;org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;&quot; classpath &apos;org.junit.platform:junit-platform-gradle-plugin:1.0.0&apos; &#125;&#125;repositories &#123; mavenCentral()&#125; 为什么要定义两次repositories，甚至dependencies？他们有什么不同？ 其实，buildScripts是Gradle脚本本身所需要使用的依赖，因为Gradle脚本是基于Groovy DSL的，可以在脚本中引入第三方的库，就像我们编写Java代码一样。在buildScript外部的配置才是我们项目本身相关的配置。 Plugins12345apply plugin: &apos;java&apos;apply plugin: &apos;idea&apos;apply plugin: &apos;org.springframework.boot&apos;apply plugin: &apos;io.spring.dependency-management&apos;apply plugin: &apos;org.junit.platform.gradle.plugin&apos; plugins指的是Gradle中各种第三方插件，有了这些开箱即用的插件，我们可以省去许多配置。比如我们熟悉的gradle bootRun 以及 gradle flyway等都是由插件提供的快捷指令。 Project Info123group = &apos;com.tw&apos;version = &apos;0.0.1-SNAPSHOT&apos;sourceCompatibility = 1.8 上面三行是项目的相关信息，可以定义项目的组名、版本号、Java版本、名称等，更多项目信息配置项可以参考官方文档。 Repositories123repositories &#123; mavenCentral()&#125; 这里定义的是依赖仓库地址，Gradle项目中默认会使用Maven中央仓库，但是这个仓库由于一些不可抗力的原因，能让一个小项目的Sync时间高达半个小时。所以这里建议换成国内的仓库地址： 1maven &#123;url &apos;http://maven.aliyun.com/nexus/content/groups/public/&apos;&#125; Dependencies12345678910111213dependencies &#123; implementation &apos;org.springframework.boot:spring-boot-starter-actuator&apos; implementation &apos;org.springframework.boot:spring-boot-starter-web&apos; implementation &apos;org.springframework.boot:spring-boot-starter-data-jpa&apos; runtimeOnly &apos;com.h2database:h2:1.4.199&apos; implementation &apos;org.projectlombok:lombok:1.18.8&apos; implementation &apos;org.flywaydb:flyway-core:5.2.4&apos; testImplementation &apos;org.springframework.boot:spring-boot-starter-test&apos; testImplementation(&apos;org.junit.jupiter:junit-jupiter-api:5.0.0&apos;) testImplementation(&apos;org.junit.jupiter:junit-jupiter-params:5.0.0&apos;) testRuntimeOnly(&apos;org.junit.jupiter:junit-jupiter-engine:5.0.0&apos;)&#125; 这里是Gradle的依赖管理部分，与Maven一样，Gradle也提供了几种常用的依赖作用范围： compileOnly: 标注用于编译项目但不应该成为运行时环境的依赖 implementation (替换 compile)：标注用于项目编译过程以及运行时的依赖 runtimeOnly (替换 runtime)：标注只用于项目运行时的依赖除此之外，还有 testCompileOnly, testImplementation 和 testRuntimeOnly，这三种与上面的并没有什么不同，只是他们作用于测试环境。 Tips在Gradle中遇到如下常见问题，可以参考下面的方法解决： IDEA未识别Gradle项目通常情况下，IDEA会自动把有build.gradle文件的项目识别为gradle项目，并且在index完成后会在右下角提示，要是手贱点掉了那个提示，可以通过以下方式解决： 右键项目 -&gt; Open Module Settings -&gt; Facets -&gt; + -&gt; Java-Gradle -&gt; 选中项目目录 项目引入慢 maven {url ‘http://maven.aliyun.com/nexus/content/groups/public/&#39;} 引入了依赖却无法引用可能是引入依赖后没有Sync项目导致。可以打开IDEA最右边的Gradle选项卡，如果你没有找到，可以找到IDEA的顶部选项卡 View -&gt; Tool Window Bars，如果打开了还是没有，请查看该项目是不是已经被IDEA识别为Gradle项目。在打开Gradle选项卡后，选项卡左上角有个刷新图标，点击即可刷新项目引入依赖。在这里推荐打开Auto-Import，右键选项卡中的项目名称即可找到该选项。 若刷新项目后，还是无法引用依赖，请检查依赖的名称以及版本号是否有错误。可以到选项卡中的Source Sets检查。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
